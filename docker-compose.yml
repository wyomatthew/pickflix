services:
  # nginx
  # https://hub.docker.com/_/nginx
  reverse_proxy:
    image: nginx
    container_name: reverse_proxy
    volumes:
      - ${CONFIG_ROOT_DIR}/nginx.conf:/etc/nginx/nginx.conf
      - ${CERT_PATH}:/etc/nginx/cert.pem
      - ${KEY_PATH}:/etc/nginx/key.pem
    ports:
      - 443:443
      - 80:80
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost/healthcheck" ]
      interval: 30s
      retries: 10
    depends_on:
      vpn:
        condition: service_healthy
  # vpn
  # https://github.com/thrnz/docker-wireguard-pia
  vpn:
    image: thrnz/docker-wireguard-pia
    container_name: vpn
    volumes:
      - ${CONFIG_ROOT_DIR}/pia:/pia
      - ${CONFIG_ROOT_DIR}/pia-shared:/pia-shared
    cap_add: # necessary for privileges to use VPN
      - NET_ADMIN 
      - SYS_MODULE
    environment:
      - LOC=${PIA_LOCATION}
      - USER=${PIA_USER}
      - PASS=${PIA_PASS}
      - LOCAL_NETWORK=${PIA_LOCAL_NETWORK}
      - PORT_FORWARDING=1
      - PORT_PERSIST=1
    sysctls:
      - net.ipv4.conf.all.forwarding=1
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv6.conf.default.disable_ipv6=1
      - net.ipv6.conf.all.disable_ipv6=1
      - net.ipv6.conf.lo.disable_ipv6=1
    healthcheck:
      test: ping -c 1 www.google.com || exit 1
      interval: 5s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    labels:
      - com.centurylinklabs.watchtower.enable=false
  # qbittorrent
  # https://hub.docker.com/r/linuxserver/qbittorrent
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
      - WEBUI_PORT=8080
      - TORRENTING_PORT=6881
      - DOCKER_MODS=ghcr.io/gabe565/linuxserver-mod-vuetorrent # gives alternative web UI built in Vue.js
    volumes:
      - ${CONFIG_ROOT_DIR}/qbittorrent:/config
      - ${DATA_ROOT_DIR}/torrents:/data/torrents
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080", "https://google.com" ]
      interval: 30s
      retries: 10
    network_mode: "service:vpn"
    depends_on:
      vpn:
        condition: service_healthy
  # jellyseerr
  # https://github.com/Fallenbagel/jellyseerr
  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT_DIR}/jellyseerr:/app/config
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "wget http://localhost:5055/api/v1/status -qO /dev/null || exit 1" ]
      interval: 30s
      retries: 10
  # radarr
  # https://hub.docker.com/r/linuxserver/radarr
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT_DIR}/radarr:/config
      - ${DATA_ROOT_DIR}:/data
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:7878/radarr/ping" ]
      interval: 30s
      retries: 10
    network_mode: "service:vpn"
    depends_on:
      vpn:
        condition: service_healthy
    restart: unless-stopped
  # sonarr
  # https://hub.docker.com/r/linuxserver/sonarr
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT_DIR}/sonarr:/config
      - ${DATA_ROOT_DIR}:/data
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8989/sonarr/ping" ]
      interval: 30s
      retries: 10
    network_mode: "service:vpn"
    depends_on:
      vpn:
        condition: service_healthy
    restart: unless-stopped
  # bazarr
  # https://docs.linuxserver.io/images/docker-bazarr/
  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT_DIR}/bazarr:/config
      - ${DATA_ROOT_DIR}:/data
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:6767/bazarr/ping" ]
      interval: 30s
      retries: 10
    network_mode: "service:vpn"
    depends_on:
      vpn:
        condition: service_healthy
    restart: unless-stopped
  # prowlarr
  # https://hub.docker.com/r/linuxserver/prowlarr
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT_DIR}/prowlarr:/config
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:9696/prowlarr/ping" ]
      interval: 30s
      retries: 10
    network_mode: "service:vpn"
    depends_on:
      vpn:
        condition: service_healthy
    restart: unless-stopped
  # flaresolverr
  # https://hub.docker.com/r/flaresolverr/flaresolverr
  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    environment:
      - TZ=${TIMEZONE}
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8191" ]
      interval: 30s
      retries: 10
    network_mode: "service:vpn"
    depends_on:
      vpn:
        condition: service_healthy
    restart: unless-stopped
  # jellyfin
  # https://hub.docker.com/r/linuxserver/jellyfin
  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT_DIR}/jellyfin:/config
      - ${DATA_ROOT_DIR}:/data
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8096/health" ]
      interval: 30s
      retries: 10
    network_mode: "service:vpn"
    restart: unless-stopped
