events {
}

http {
  include /etc/nginx/mime.types;

  ssl_certificate /etc/nginx/cert.pem;
  ssl_certificate_key /etc/nginx/key.pem;

  log_format main '$remote_addr - $remote_user [$time_local] "$request" '
  '$status $body_bytes_sent "$http_referer" '
  '"$http_user_agent" "$http_x_forwarded_for"';
  access_log /var/log/nginx/access.log main;

  # root
  server {
    listen $REVERSE_PROXY_SSL_PORT ssl;
    server_name pickflix.mov pickflix.mov.localhost;

    location / {
      return 404;
    }
  }

  # jellyfin
  server {
    listen $REVERSE_PROXY_SSL_PORT ssl;
    server_name streaming.pickflix.mov streaming.pickflix.mov.localhost;
    location / {
      proxy_pass http://vpn:8096;
      proxy_set_header Host $http_host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $http_connection;
    }
  }

  # jellyseerr
  server {
    listen $REVERSE_PROXY_SSL_PORT ssl;
    server_name requests.pickflix.mov requests.pickflix.mov.localhost;
    location / {
      proxy_pass http://jellyseerr:5055;
    }
  }

  # wizarr
  server {
    listen $REVERSE_PROXY_SSL_PORT ssl;
    server_name welcome.pickflix.mov welcome.pickflix.mov.localhost;
    location / {
      # derived from https://docs.wizarr.dev/getting-started/reverse-proxy
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
      proxy_set_header Host $http_host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $remote_addr;
      proxy_set_header X-Forwarded-Port $server_port;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_redirect off;
      proxy_buffering off;
      proxy_pass http://wizarr:5690;
    }
  }

  # admin panel
  server {
    listen $REVERSE_PROXY_PORT;
    listen $REVERSE_PROXY_SSL_PORT ssl;
    server_name melons melons.lan, melons.tailceb2d9.ts.net localhost;
    allow 192.168.86.0/24; # local network
    allow 172.16.0.0/12; # local network
    allow 100.64.0.0/10; # tailnet
    deny all;

    location /qbittorrent/ {
      proxy_pass http://vpn:8080/;
      proxy_set_header Host $http_host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }
    location /bazarr/ {
      proxy_pass http://vpn:6767;
      proxy_set_header Host $http_host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $http_connection;
    }
    location /prowlarr/ {
      proxy_pass http://vpn:9696;
      proxy_set_header Host $http_host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $http_connection;
    }
    location /sonarr/ {
      proxy_pass http://vpn:8989;
      proxy_set_header Host $http_host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $http_connection;
    }
    location /radarr/ {
      proxy_pass http://vpn:7878;
      proxy_set_header Host $http_host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $http_connection;
    }

    location /healthcheck {
      return 200;
    }

    location / {
      return 404;
    }
  }

  server {

    listen $REVERSE_PROXY_PORT;
    listen $REVERSE_PROXY_SSL_PORT ssl;
    server_name _;

    location /healthcheck {
      return 200;
    }

    location / {
      return 404;
    }
  }

}

